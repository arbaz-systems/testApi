BROKER SCHEMA com.systemsltd.ubl.accountmanagementservice

PATH com.systemsltd.common, com.systemsltd.ubl.cbs, com.systemsltd.ubl.common, 
com.systemsltd.ubl.common.config, com.systemsltd.ubl.common.database;

CREATE FILTER MODULE ValidateAccountAmendment
	CREATE FUNCTION Main () RETURNS BOOLEAN
	BEGIN
		DECLARE transRef REFERENCE TO Environment.Variables.Transaction;
		DECLARE inMsgRef REFERENCE TO Root.JSON.Data;
		
		CREATE FIELD transRef.Error IDENTITY (JSON.Array);
		
		CALL validateServiceHeader(inMsgRef.serviceHeader, transRef);
		CALL validateTransactionInfo(inMsgRef.transactionInfo, transRef, 'CUSTOMER_ACCOUNT', 'AMENDMENT');
		
		IF NOT fieldAndValueExists(inMsgRef.accountAmendmentRequest.acctMaintIn.acctNo, 'acctNo') THEN
			CREATE LASTCHILD OF transRef.Error TYPE NameValue NAME 'Item' VALUE getValidationErrorMsg('acctNo');
		END IF;
		
		RETURN EXISTS(transRef.Error.Item[]);
	END; 
END MODULE;


CREATE COMPUTE MODULE PrepareAccountAmendmentRequest
	CREATE FUNCTION Main () RETURNS BOOLEAN
	BEGIN
		SET OutputRoot.Properties = InputProperties;
		DECLARE inMsgRef REFERENCE TO InputRoot.JSON.Data;
		
		CREATE FIELD OutputRoot.XMLNSC.REQUEST_IN.HEADER_IN;
		DECLARE outRef REFERENCE TO OutputRoot.XMLNSC.REQUEST_IN;
	
		CALL populateCBSMessageHeader(inMsgRef,outRef);
		
		CREATE FIELD OutputRoot.XMLNSC.REQUEST_IN.DETAIL_IN.SYM_RB_ACCT_CASA_MAINT_IN;
		MOVE outRef TO outRef.DETAIL_IN.SYM_RB_ACCT_CASA_MAINT_IN;
		MOVE inMsgRef TO inMsgRef.accountAmendmentRequest.acctMaintIn;
		
		SET outRef.ACCT_NO = inMsgRef.acctNo;
		SET outRef.FEE_IND = inMsgRef.feeInd;
		SET outRef.HOST_CHECK_FLAG = 'N';
		SET outRef.IS_CLIENT_CMC_USED = inMsgRef.isClientCmcUsed;

		IF fieldAndValueExists(inMsgRef.acctMaintUpdDtls.acctMaintUpdT."position", 'position') THEN

	 		MOVE inMsgRef TO inMsgRef.acctMaintUpdDtls.acctMaintUpdT;
	 		SET outRef.RB_ACCT_CASA_MAINT_UPD_DTLS.RB_ACCT_CASA_MAINT_UPD_T.POSITION = COALESCE(inMsgRef."position", '');
			SET outRef.RB_ACCT_CASA_MAINT_UPD_DTLS.RB_ACCT_CASA_MAINT_UPD_T.VERSION = COALESCE(inMsgRef.version, '');
			SET outRef.RB_ACCT_CASA_MAINT_UPD_DTLS.RB_ACCT_CASA_MAINT_UPD_T.ACCT_DESC = COALESCE(inMsgRef.acctDesc, '');
			SET outRef.RB_ACCT_CASA_MAINT_UPD_DTLS.RB_ACCT_CASA_MAINT_UPD_T.ACCT_PASSWORD = COALESCE(inMsgRef.acctPassword, '');
			SET outRef.RB_ACCT_CASA_MAINT_UPD_DTLS.RB_ACCT_CASA_MAINT_UPD_T.WS_ID = COALESCE(inMsgRef.wsId, '');
			SET outRef.RB_ACCT_CASA_MAINT_UPD_DTLS.RB_ACCT_CASA_MAINT_UPD_T.USER_ID = COALESCE(inMsgRef.userId, '');
			SET outRef.RB_ACCT_CASA_MAINT_UPD_DTLS.RB_ACCT_CASA_MAINT_UPD_T.OWNERSHIP_TYPE = COALESCE(inMsgRef.ownershipType, '');
			SET outRef.RB_ACCT_CASA_MAINT_UPD_DTLS.RB_ACCT_CASA_MAINT_UPD_T.OFFICER_ID = COALESCE(inMsgRef.officerId, '');
			SET outRef.RB_ACCT_CASA_MAINT_UPD_DTLS.RB_ACCT_CASA_MAINT_UPD_T.FREE_CHEQUES = COALESCE(inMsgRef.freeCheques, '');
			SET outRef.RB_ACCT_CASA_MAINT_UPD_DTLS.RB_ACCT_CASA_MAINT_UPD_T.LAST_CHANGE_OFFICER = COALESCE(inMsgRef.lastChangeOfficer, '');
			SET outRef.RB_ACCT_CASA_MAINT_UPD_DTLS.RB_ACCT_CASA_MAINT_UPD_T.TOLERANCE_AMT = COALESCE(inMsgRef.toleranceAmt, '');
			SET outRef.RB_ACCT_CASA_MAINT_UPD_DTLS.RB_ACCT_CASA_MAINT_UPD_T.ATA_ACCT = COALESCE(inMsgRef.ataAcct, '');
			SET outRef.RB_ACCT_CASA_MAINT_UPD_DTLS.RB_ACCT_CASA_MAINT_UPD_T.CR_ACCT_LEVEL_INT_RATE = COALESCE(inMsgRef.crAcctLevelIntRate, '');
			SET outRef.RB_ACCT_CASA_MAINT_UPD_DTLS.RB_ACCT_CASA_MAINT_UPD_T.CR_SPREAD_RATE = COALESCE(inMsgRef.crSpreadRate, '');
			SET outRef.RB_ACCT_CASA_MAINT_UPD_DTLS.RB_ACCT_CASA_MAINT_UPD_T.CR_INT_TYPE = COALESCE(inMsgRef.crIntType, '');
			SET outRef.RB_ACCT_CASA_MAINT_UPD_DTLS.RB_ACCT_CASA_MAINT_UPD_T.CR_TAX_TYPE = COALESCE(inMsgRef.crTaxType, '');
			SET outRef.RB_ACCT_CASA_MAINT_UPD_DTLS.RB_ACCT_CASA_MAINT_UPD_T.CR_FREQ = COALESCE(inMsgRef.crFreq, '');

			IF fieldAndValueExists(inMsgRef.crNextCycleDate, 'crNextCycleDate') THEN
				SET outRef.RB_ACCT_CASA_MAINT_UPD_DTLS.RB_ACCT_CASA_MAINT_UPD_T.CR_NEXT_CYCLE_DATE = CAST(CAST(inMsgRef.crNextCycleDate AS DATE FORMAT 'yyyy-MM-dd') AS CHARACTER FORMAT 'dd.MM.yyyy HH:mm:ss');
			ELSE
				SET outRef.RB_ACCT_CASA_MAINT_UPD_DTLS.RB_ACCT_CASA_MAINT_UPD_T.CR_NEXT_CYCLE_DATE = '';
			END IF;

			SET outRef.RB_ACCT_CASA_MAINT_UPD_DTLS.RB_ACCT_CASA_MAINT_UPD_T.CR_INT_DAY = COALESCE(inMsgRef.crIntDay, '');
			SET outRef.RB_ACCT_CASA_MAINT_UPD_DTLS.RB_ACCT_CASA_MAINT_UPD_T.CR_THIRD_PARTY_ACCT = COALESCE(inMsgRef.crThirdPartyAcct, '');
			SET outRef.RB_ACCT_CASA_MAINT_UPD_DTLS.RB_ACCT_CASA_MAINT_UPD_T.CR_COF_APPL_TYPE = COALESCE(inMsgRef.crCofApplType, '');
			SET outRef.RB_ACCT_CASA_MAINT_UPD_DTLS.RB_ACCT_CASA_MAINT_UPD_T.CR_FUND_TYPE = COALESCE(inMsgRef.crFundType, '');
			SET outRef.RB_ACCT_CASA_MAINT_UPD_DTLS.RB_ACCT_CASA_MAINT_UPD_T.CR_COF_RATE = COALESCE(inMsgRef.crCofRate, '');
			SET outRef.RB_ACCT_CASA_MAINT_UPD_DTLS.RB_ACCT_CASA_MAINT_UPD_T.CR_COF_LIQ_PREMIA = COALESCE(inMsgRef.crCofLiqPremia, '');
			SET outRef.RB_ACCT_CASA_MAINT_UPD_DTLS.RB_ACCT_CASA_MAINT_UPD_T.CR_STAT_CODE = COALESCE(inMsgRef.crStatCode, '');
			SET outRef.RB_ACCT_CASA_MAINT_UPD_DTLS.RB_ACCT_CASA_MAINT_UPD_T.CR_REALZN_INT_TYPE = COALESCE(inMsgRef.crRealznIntType, '');
			SET outRef.RB_ACCT_CASA_MAINT_UPD_DTLS.RB_ACCT_CASA_MAINT_UPD_T.DR_ACCT_LEVEL_INT_RATE = COALESCE(inMsgRef.drAcctLevelIntRate, '');
			SET outRef.RB_ACCT_CASA_MAINT_UPD_DTLS.RB_ACCT_CASA_MAINT_UPD_T.DR_SPREAD_RATE = COALESCE(inMsgRef.drSpreadRate, '');
			SET outRef.RB_ACCT_CASA_MAINT_UPD_DTLS.RB_ACCT_CASA_MAINT_UPD_T.DR_INT_TYPE = COALESCE(inMsgRef.drIntType, '');
			SET outRef.RB_ACCT_CASA_MAINT_UPD_DTLS.RB_ACCT_CASA_MAINT_UPD_T.PENALTY_MARGIN_RATE = COALESCE(inMsgRef.penaltyMarginRate, '');
			SET outRef.RB_ACCT_CASA_MAINT_UPD_DTLS.RB_ACCT_CASA_MAINT_UPD_T.DR_FREQ = COALESCE(inMsgRef.drFreq, '');

			IF fieldAndValueExists(inMsgRef.drNextCycleDate, 'drNextCycleDate') THEN
				SET outRef.RB_ACCT_CASA_MAINT_UPD_DTLS.RB_ACCT_CASA_MAINT_UPD_T.DR_NEXT_CYCLE_DATE = CAST(CAST(inMsgRef.drNextCycleDate AS DATE FORMAT 'yyyy-MM-dd') AS CHARACTER FORMAT 'dd.MM.yyyy HH:mm:ss');
			ELSE
				SET outRef.RB_ACCT_CASA_MAINT_UPD_DTLS.RB_ACCT_CASA_MAINT_UPD_T.DR_NEXT_CYCLE_DATE = '';
			END IF;

			SET outRef.RB_ACCT_CASA_MAINT_UPD_DTLS.RB_ACCT_CASA_MAINT_UPD_T.DR_INT_DAY = COALESCE(inMsgRef.drIntDay, '');
			SET outRef.RB_ACCT_CASA_MAINT_UPD_DTLS.RB_ACCT_CASA_MAINT_UPD_T.DR_THIRD_PARTY_ACCT = COALESCE(inMsgRef.drThirdPartyAcct, '');
			SET outRef.RB_ACCT_CASA_MAINT_UPD_DTLS.RB_ACCT_CASA_MAINT_UPD_T.DR_COF_APPL_TYPE = COALESCE(inMsgRef.drCofApplType, '');
			SET outRef.RB_ACCT_CASA_MAINT_UPD_DTLS.RB_ACCT_CASA_MAINT_UPD_T.DR_FUND_TYPE = COALESCE(inMsgRef.drFundType, '');
			SET outRef.RB_ACCT_CASA_MAINT_UPD_DTLS.RB_ACCT_CASA_MAINT_UPD_T.DR_COF_RATE = COALESCE(inMsgRef.drCofRate, '');
			SET outRef.RB_ACCT_CASA_MAINT_UPD_DTLS.RB_ACCT_CASA_MAINT_UPD_T.DR_COF_LIQ_PREMIA = COALESCE(inMsgRef.drCofLiqPremia, '');
			SET outRef.RB_ACCT_CASA_MAINT_UPD_DTLS.RB_ACCT_CASA_MAINT_UPD_T.DR_COF_EFFECT_RATE = COALESCE(inMsgRef.drCofEffectRate, '');
			SET outRef.RB_ACCT_CASA_MAINT_UPD_DTLS.RB_ACCT_CASA_MAINT_UPD_T.DR_STAT_CODE = COALESCE(inMsgRef.drStatCode, '');
		END IF;

		IF fieldAndValueExists(InputRoot.JSON.Data.accountAmendmentRequest.acctMaintIn.stmtMaintInsDtls.stmtMaintInsT."position", 'position') THEN

			MOVE inMsgRef TO InputRoot.JSON.Data.accountAmendmentRequest.acctMaintIn.stmtMaintInsDtls.stmtMaintInsT;
			SET outRef.RB_STMT_CASA_MAINT_INS_DTLS.RB_STMT_CASA_MAINT_INS_T.POSITION = COALESCE(inMsgRef."position", '');
			SET outRef.RB_STMT_CASA_MAINT_INS_DTLS.RB_STMT_CASA_MAINT_INS_T.CONTACT_REF_NO = COALESCE(inMsgRef.contactRefNo, '');
			SET outRef.RB_STMT_CASA_MAINT_INS_DTLS.RB_STMT_CASA_MAINT_INS_T.STMT_LANG = COALESCE(inMsgRef.stmtLang, '');
			SET outRef.RB_STMT_CASA_MAINT_INS_DTLS.RB_STMT_CASA_MAINT_INS_T.PERIOD_FREQ = COALESCE(inMsgRef.periodFreq, '');
			SET outRef.RB_STMT_CASA_MAINT_INS_DTLS.RB_STMT_CASA_MAINT_INS_T.STMT_DAY = COALESCE(inMsgRef.stmtDay, '');

			IF fieldAndValueExists(inMsgRef.nextStmtDate, 'nextStmtDate') THEN
				SET outRef.RB_STMT_CASA_MAINT_INS_DTLS.RB_STMT_CASA_MAINT_INS_T.NEXT_STMT_DATE = CAST(CAST(inMsgRef.nextStmtDate AS DATE FORMAT 'yyyy-MM-dd') AS CHARACTER FORMAT 'dd.MM.yyyy HH:mm:ss');
			ELSE
				SET outRef.RB_STMT_CASA_MAINT_INS_DTLS.RB_STMT_CASA_MAINT_INS_T.NEXT_STMT_DATE = '';
			END IF;

			
			SET outRef.RB_STMT_CASA_MAINT_INS_DTLS.RB_STMT_CASA_MAINT_INS_T.SUPPRESS_PRINT = COALESCE(inMsgRef.suppressPrint, '');
			SET outRef.RB_STMT_CASA_MAINT_INS_DTLS.RB_STMT_CASA_MAINT_INS_T.LAST_STMT_NO = COALESCE(inMsgRef.lastStmtNo, '');
			SET outRef.RB_STMT_CASA_MAINT_INS_DTLS.RB_STMT_CASA_MAINT_INS_T.STMT_AT_CAP = COALESCE(inMsgRef.stmtAtCap, '');
			SET outRef.RB_STMT_CASA_MAINT_INS_DTLS.RB_STMT_CASA_MAINT_INS_T.CML_STMT_CODE = COALESCE(inMsgRef.cmlStmtCode, '');
			SET outRef.RB_STMT_CASA_MAINT_INS_DTLS.RB_STMT_CASA_MAINT_INS_T.CONTACT_TYPE = COALESCE(inMsgRef.contactType, '');
			SET outRef.RB_STMT_CASA_MAINT_INS_DTLS.RB_STMT_CASA_MAINT_INS_T.STMT_AFTER_MOVEMENT = COALESCE(inMsgRef.stmtAfterMovement, '');
			SET outRef.RB_STMT_CASA_MAINT_INS_DTLS.RB_STMT_CASA_MAINT_INS_T.STMT_TYPE = COALESCE(inMsgRef.stmtType, '');
			SET outRef.RB_STMT_CASA_MAINT_INS_DTLS.RB_STMT_CASA_MAINT_INS_T.CONS_SC = COALESCE(inMsgRef.consSc, '');
			SET outRef.RB_STMT_CASA_MAINT_INS_DTLS.RB_STMT_CASA_MAINT_INS_T.TEMPLATE = COALESCE(inMsgRef.template, '');
			SET outRef.RB_STMT_CASA_MAINT_INS_DTLS.RB_STMT_CASA_MAINT_INS_T.NO_OF_COPIES = COALESCE(inMsgRef.noOfCopies, '');
			SET outRef.RB_STMT_CASA_MAINT_INS_DTLS.RB_STMT_CASA_MAINT_INS_T.STMT_HANDLING = COALESCE(inMsgRef.stmtHandling, '');
			SET outRef.RB_STMT_CASA_MAINT_INS_DTLS.RB_STMT_CASA_MAINT_INS_T.DISTR_CHANNEL = COALESCE(inMsgRef.distrChannel, '');
			SET outRef.RB_STMT_CASA_MAINT_INS_DTLS.RB_STMT_CASA_MAINT_INS_T.CTRL_COMMAND = COALESCE(inMsgRef.ctrlCommand, '');
		END IF;

		IF fieldAndValueExists(InputRoot.JSON.Data.accountAmendmentRequest.acctMaintIn.stmtMaintUpdDtls.stmtMaintUpdT."position", 'position') THEN

			MOVE inMsgRef TO InputRoot.JSON.Data.accountAmendmentRequest.acctMaintIn.stmtMaintUpdDtls.stmtMaintUpdT;
			SET outRef.RB_STMT_CASA_MAINT_UPD_DTLS.RB_STMT_CASA_MAINT_UPD_T.POSITION = COALESCE(inMsgRef."position", '');
			SET outRef.RB_STMT_CASA_MAINT_UPD_DTLS.RB_STMT_CASA_MAINT_UPD_T.VERSION = COALESCE(inMsgRef.version, '');
			SET outRef.RB_STMT_CASA_MAINT_UPD_DTLS.RB_STMT_CASA_MAINT_UPD_T.CONTACT_REF_NO = COALESCE(inMsgRef.contactRefNo, '');
			SET outRef.RB_STMT_CASA_MAINT_UPD_DTLS.RB_STMT_CASA_MAINT_UPD_T.STMT_REF_NO = COALESCE(inMsgRef.stmtRefNo, '');
			SET outRef.RB_STMT_CASA_MAINT_UPD_DTLS.RB_STMT_CASA_MAINT_UPD_T.PERIOD_FREQ = COALESCE(inMsgRef.periodFreq, '');
			SET outRef.RB_STMT_CASA_MAINT_UPD_DTLS.RB_STMT_CASA_MAINT_UPD_T.STMT_LANG = COALESCE(inMsgRef.stmtLang, '');
			SET outRef.RB_STMT_CASA_MAINT_UPD_DTLS.RB_STMT_CASA_MAINT_UPD_T.STMT_DAY = COALESCE(inMsgRef.stmtDay, '');

			IF fieldAndValueExists(inMsgRef.nextStmtDate, 'nextStmtDate') THEN
				SET outRef.RB_STMT_CASA_MAINT_UPD_DTLS.RB_STMT_CASA_MAINT_UPD_T.NEXT_STMT_DATE = CAST(CAST(inMsgRef.nextStmtDate AS DATE FORMAT 'yyyy-MM-dd') AS CHARACTER FORMAT 'dd.MM.yyyy HH:mm:ss');
			ELSE
				SET outRef.RB_STMT_CASA_MAINT_UPD_DTLS.RB_STMT_CASA_MAINT_UPD_T.NEXT_STMT_DATE = '';
			END IF;

			SET outRef.RB_STMT_CASA_MAINT_UPD_DTLS.RB_STMT_CASA_MAINT_UPD_T.SUPPRESS_PRINT = COALESCE(inMsgRef.suppressPrint, '');
			SET outRef.RB_STMT_CASA_MAINT_UPD_DTLS.RB_STMT_CASA_MAINT_UPD_T.STMT_AT_CAP = COALESCE(inMsgRef.stmtAtCap, '');
			SET outRef.RB_STMT_CASA_MAINT_UPD_DTLS.RB_STMT_CASA_MAINT_UPD_T.CML_STMT_CODE = COALESCE(inMsgRef.cmlStmtCode, '');
			SET outRef.RB_STMT_CASA_MAINT_UPD_DTLS.RB_STMT_CASA_MAINT_UPD_T.CONTACT_TYPE = COALESCE(inMsgRef.contactType, '');
			SET outRef.RB_STMT_CASA_MAINT_UPD_DTLS.RB_STMT_CASA_MAINT_UPD_T.STMT_HANDLING = COALESCE(inMsgRef.stmtHandling, '');
			SET outRef.RB_STMT_CASA_MAINT_UPD_DTLS.RB_STMT_CASA_MAINT_UPD_T.NO_OF_COPIES = COALESCE(inMsgRef.noOfCopies, '');
			SET outRef.RB_STMT_CASA_MAINT_UPD_DTLS.RB_STMT_CASA_MAINT_UPD_T.DISTR_CHANNEL = COALESCE(inMsgRef.distrChannel, '');
		END IF;

		IF fieldAndValueExists(InputRoot.JSON.Data.accountAmendmentRequest.acctMaintIn.stmtMaintDelDtls.stmtMaintDelT."position", 'position') THEN

			MOVE inMsgRef TO InputRoot.JSON.Data.accountAmendmentRequest.acctMaintIn.stmtMaintDelDtls.stmtMaintDelT;
			SET outRef.RB_STMT_CASA_MAINT_DEL_DTLS.RB_STMT_CASA_MAINT_DEL_T.POSITION = COALESCE(inMsgRef."position", '');
			SET outRef.RB_STMT_CASA_MAINT_DEL_DTLS.RB_STMT_CASA_MAINT_DEL_T.VERSION = COALESCE(inMsgRef.version, '');
			SET outRef.RB_STMT_CASA_MAINT_DEL_DTLS.RB_STMT_CASA_MAINT_DEL_T.STMT_REF_NO = COALESCE(inMsgRef.stmtRefNo, '');
		END IF;

		IF fieldAndValueExists(InputRoot.JSON.Data.accountAmendmentRequest.acctMaintIn.jointMaintInsDtls.jointMaintInsT."position", 'position') THEN

			MOVE inMsgRef TO InputRoot.JSON.Data.accountAmendmentRequest.acctMaintIn.jointMaintInsDtls.jointMaintInsT;
			SET outRef.RB_JOINT_CASA_MAINT_INS_DTLS.RB_JOINT_CASA_MAINT_INS_T.POSITION = COALESCE(inMsgRef."position", '');
			SET outRef.RB_JOINT_CASA_MAINT_INS_DTLS.RB_JOINT_CASA_MAINT_INS_T.JOINT_CLIENT_NO = COALESCE(inMsgRef.jointClientNo, '');
		END IF;

		IF fieldAndValueExists(InputRoot.JSON.Data.accountAmendmentRequest.acctMaintIn.jointMaintDelDtls.jointMaintDelT."position", 'position') THEN

			MOVE inMsgRef TO InputRoot.JSON.Data.accountAmendmentRequest.acctMaintIn.jointMaintDelDtls.jointMaintDelT;
			SET outRef.RB_JOINT_CASA_MAINT_DEL_DTLS.RB_JOINT_CASA_MAINT_DEL_T.POSITION = COALESCE(inMsgRef."position", '');
			SET outRef.RB_JOINT_CASA_MAINT_DEL_DTLS.RB_JOINT_CASA_MAINT_DEL_T.VERSION = COALESCE(inMsgRef.version, '');
			SET outRef.RB_JOINT_CASA_MAINT_DEL_DTLS.RB_JOINT_CASA_MAINT_DEL_T.JOINT_CLIENT_NO = COALESCE(inMsgRef.jointClientNo, '');
		END IF;

		SET outRef.RB_WDL_NTC_CASA_MAINT_INS_DTLS.RB_WDL_NTC_CASA_MAINT_INS_T.WDL_AMT = COALESCE(InputRoot.JSON.Data.accountAmendmentRequest.acctMaintIn.wdlNtcMaintInsDtls.wdlNtcMaintInsT.wdlAmt, '');
		
		MOVE inMsgRef TO InputRoot.JSON.Data.accountAmendmentRequest.acctMaintIn.scApplyIn;
		SET outRef.SC_APPLY_IN.EVIDENCE = COALESCE(inMsgRef.evidence, '');
		SET outRef.SC_APPLY_IN.FORCED_POST = COALESCE(inMsgRef.forcedPost, '');
		SET outRef.SC_APPLY_IN.ACCT_NO = COALESCE(inMsgRef.acctNo, '');
		SET outRef.SC_APPLY_IN.PRODUCT_CLASS = COALESCE(inMsgRef.productClass, '');
		SET outRef.SC_APPLY_IN.SC_EVENT_REF_NO = COALESCE(inMsgRef.scEventRefNo, '');
		SET outRef.SC_APPLY_IN.SC_CCY = COALESCE(inMsgRef.scCcy, '');
		SET outRef.SC_APPLY_IN.PROD_NO = COALESCE(inMsgRef.prodNo, '');
		SET outRef.SC_APPLY_IN.MODULE_ID = COALESCE(inMsgRef.moduleId, '');
		SET outRef.SC_APPLY_IN.SUB_TYPE = COALESCE(inMsgRef.subType, '');
		SET outRef.SC_APPLY_IN.BOOK_BRANCH = COALESCE(inMsgRef.bookBranch, '');
		SET outRef.SC_APPLY_IN.PAYMENT_CCY = COALESCE(inMsgRef.paymentCcy, '');

		IF fieldAndValueExists(inMsgRef.scDetailIn.fmFeeApplyDtlInT."position", 'position') THEN

			MOVE inMsgRef TO inMsgRef.scDetailIn.fmFeeApplyDtlInT;
			SET outRef.SC_APPLY_IN.SC_DETAIL_IN.FM_FEE_APPLY_DTL_IN_T.POSITION = COALESCE(inMsgRef."position", '');
			SET outRef.SC_APPLY_IN.SC_DETAIL_IN.FM_FEE_APPLY_DTL_IN_T.SC_EVENT_TYPE = COALESCE(inMsgRef.scEventType, '');
			SET outRef.SC_APPLY_IN.SC_DETAIL_IN.FM_FEE_APPLY_DTL_IN_T.SC_EVENT_SUBTYPE = COALESCE(inMsgRef.scEventSubtype, '');
			SET outRef.SC_APPLY_IN.SC_DETAIL_IN.FM_FEE_APPLY_DTL_IN_T.INPUT1 = COALESCE(inMsgRef.input1, '');
			SET outRef.SC_APPLY_IN.SC_DETAIL_IN.FM_FEE_APPLY_DTL_IN_T.INPUT2 = COALESCE(inMsgRef.input2, '');
			SET outRef.SC_APPLY_IN.SC_DETAIL_IN.FM_FEE_APPLY_DTL_IN_T.INPUT3 = COALESCE(inMsgRef.input3, '');
			SET outRef.SC_APPLY_IN.SC_DETAIL_IN.FM_FEE_APPLY_DTL_IN_T.INPUT4 = COALESCE(inMsgRef.input4, '');
			SET outRef.SC_APPLY_IN.SC_DETAIL_IN.FM_FEE_APPLY_DTL_IN_T.INPUT5 = COALESCE(inMsgRef.input5, '');
			SET outRef.SC_APPLY_IN.SC_DETAIL_IN.FM_FEE_APPLY_DTL_IN_T.INPUT6 = COALESCE(inMsgRef.input6, '');
			SET outRef.SC_APPLY_IN.SC_DETAIL_IN.FM_FEE_APPLY_DTL_IN_T.INPUT7 = COALESCE(inMsgRef.input7, '');
			SET outRef.SC_APPLY_IN.SC_DETAIL_IN.FM_FEE_APPLY_DTL_IN_T.INPUT8 = COALESCE(inMsgRef.input8, '');
			SET outRef.SC_APPLY_IN.SC_DETAIL_IN.FM_FEE_APPLY_DTL_IN_T.SC_TYPE = COALESCE(inMsgRef.scType, '');
			SET outRef.SC_APPLY_IN.SC_DETAIL_IN.FM_FEE_APPLY_DTL_IN_T.SC_RATE_TYPE = COALESCE(inMsgRef.scRateType, '');
			SET outRef.SC_APPLY_IN.SC_DETAIL_IN.FM_FEE_APPLY_DTL_IN_T.CALC_BAL_TYPE = COALESCE(inMsgRef.calcBalType, '');
			SET outRef.SC_APPLY_IN.SC_DETAIL_IN.FM_FEE_APPLY_DTL_IN_T.CALC_BAL = COALESCE(inMsgRef.calcBal, '');
			SET outRef.SC_APPLY_IN.SC_DETAIL_IN.FM_FEE_APPLY_DTL_IN_T.CALC_BAL_CCY = COALESCE(inMsgRef.calcBalCcy, '');
			SET outRef.SC_APPLY_IN.SC_DETAIL_IN.FM_FEE_APPLY_DTL_IN_T.SC_MODE = COALESCE(inMsgRef.scMode, '');
			SET outRef.SC_APPLY_IN.SC_DETAIL_IN.FM_FEE_APPLY_DTL_IN_T.REASON_TYPE = COALESCE(inMsgRef.reasonType, '');
			SET outRef.SC_APPLY_IN.SC_DETAIL_IN.FM_FEE_APPLY_DTL_IN_T.REASON_DESC = COALESCE(inMsgRef.reasonDesc, '');
			SET outRef.SC_APPLY_IN.SC_DETAIL_IN.FM_FEE_APPLY_DTL_IN_T.SC_AMT = COALESCE(inMsgRef.scAmt, '');
			SET outRef.SC_APPLY_IN.SC_DETAIL_IN.FM_FEE_APPLY_DTL_IN_T.SC_TAX_AMT = COALESCE(inMsgRef.scTaxAmt, '');
			SET outRef.SC_APPLY_IN.SC_DETAIL_IN.FM_FEE_APPLY_DTL_IN_T.SC_AMT_STANDARD = COALESCE(inMsgRef.scAmtStandard, '');
			SET outRef.SC_APPLY_IN.SC_DETAIL_IN.FM_FEE_APPLY_DTL_IN_T.SC_TAX_AMT_STANDARD = COALESCE(inMsgRef.scTaxAmtStandard, '');
			SET outRef.SC_APPLY_IN.SC_DETAIL_IN.FM_FEE_APPLY_DTL_IN_T.INCOME_GL_CODE = COALESCE(inMsgRef.incomeGlCode, '');
			SET outRef.SC_APPLY_IN.SC_DETAIL_IN.FM_FEE_APPLY_DTL_IN_T.SC_PAYMENT_MODE = COALESCE(inMsgRef.scPaymentMode, '');
			SET outRef.SC_APPLY_IN.SC_DETAIL_IN.FM_FEE_APPLY_DTL_IN_T.SC_RB_SEQ_NO = COALESCE(inMsgRef.scRbSeqNo, '');
			SET outRef.SC_APPLY_IN.SC_DETAIL_IN.FM_FEE_APPLY_DTL_IN_T.TAX_RB_SEQ_NO = COALESCE(inMsgRef.taxRbSeqNo, '');
			SET outRef.SC_APPLY_IN.SC_DETAIL_IN.FM_FEE_APPLY_DTL_IN_T.TAX_CHARGE_IND = COALESCE(inMsgRef.taxChargeInd, '');
		END IF;

--		MOVE inMsgRef TO InputRoot.JSON.Data.accountAmendmentRequest.acctMaintIn.metaData.metaColumns.saMetaColumnT.Item;
--		CREATE FIELD OutputRoot.XMLNSC.REQUEST_IN.DETAIL_IN.SYM_RB_ACCT_CASA_MAINT_IN.META_DATA;
--		MOVE outRef TO OutputRoot.XMLNSC.REQUEST_IN.DETAIL_IN.SYM_RB_ACCT_CASA_MAINT_IN.META_DATA;
--		
--		SET outRef.META_ENTITY_TYPE = COALESCE(InputRoot.JSON.Data.accountAmendmentRequest.acctMaintIn.metaData.metaEntityType, '');
--		CREATE FIELD outRef.META_COLUMNS AS outRef;
--		DECLARE metaDataRef REFERENCE TO outRef.META_DATA;
--		WHILE LASTMOVE(inMsgRef) DO
--			CREATE LASTCHILD OF outRef AS metaDataRef NAME 'SA_META_COLUMN_T';
--			SET metaDataRef.META_SIMPLE.META_ID = COALESCE(inMsgRef.metaSimple.metaId, '');
--			SET metaDataRef.META_SIMPLE.META_VALUE = COALESCE(inMsgRef.metaSimple.metaValue, '');
--		
--			SET metaDataRef.META_COMPLEX.META_ID = inMsgRef.metaComplex.metaId;
--			SET metaDataRef.META_COMPLEX.META_VALUE = inMsgRef.metaComplex.metaValue;
--			MOVE inMsgRef NEXTSIBLING;
--		END WHILE;

		MOVE inMsgRef TO InputRoot.JSON.Data.accountAmendmentRequest.acctMaintIn.metaData;
		MOVE outRef TO OutputRoot.XMLNSC.REQUEST_IN.DETAIL_IN.SYM_RB_ACCT_CASA_MAINT_IN;

		CALL populateMetaData(inMsgRef, outRef);

		RETURN TRUE;
	END; 	
END MODULE;


CREATE COMPUTE MODULE CallAccountAmendment
	CREATE FUNCTION Main () RETURNS BOOLEAN
	BEGIN
		SET OutputRoot.Properties = InputProperties;
		DECLARE serializedRequest, serializedResponse CHARACTER '';
		DECLARE cbsSchemaName CHARACTER getCBSSchemaName();
		DECLARE dsnName CHARACTER Environment.Variables.fromRegionDataSource;
		
		SET serializedRequest = serializeMessage(InputRoot);
		CALL PROCESS_INQ(serializedRequest, serializedResponse) IN Database.{dsnName}.{cbsSchemaName};

		DECLARE accountAmendmentResponse BLOB CAST( serializedResponse AS BLOB CCSID InputProperties.CodedCharSetId);
		CREATE LASTCHILD OF OutputRoot DOMAIN('XMLNSC') PARSE(accountAmendmentResponse, InputProperties.Encoding, 
															  InputProperties.CodedCharSetId);

		DECLARE responseRef REFERENCE TO OutputRoot.XMLNSC.REQUEST_OUT;
		DECLARE envRef REFERENCE TO Environment.Variables.Transaction;
		
		IF cbsTransactionSuccessfull(responseRef.HEADER_OUT.RESULT_CODE) THEN
			SET envRef.HostResponse.ErrorCode = getSuccessResponseCode();
		ELSE
			PROPAGATE TO TERMINAL 1 DELETE NONE;
		END IF;
		
		RETURN TRUE;
	END; 
	
END MODULE;


CREATE COMPUTE MODULE PrepareJSONResponse
	CREATE FUNCTION Main () RETURNS BOOLEAN
	BEGIN
		CREATE FIELD OutputRoot.JSON.Data;
		DECLARE outRef REFERENCE TO OutputRoot.JSON.Data;
		DECLARE transRef REFERENCE TO Environment.Variables.Transaction;
		DECLARE status CHARACTER 'SUCCESS';

		SET OutputRoot.Properties = InputProperties;
		CALL copyAndConvertServiceHeader(transRef.Request.serviceHeader, outRef);
		CALL copyAndConvertTransactionInfo(transRef.Request.transactionInfo, outRef);
		CALL PopulateSuccessResponseHeader(outRef, status);
		
		DECLARE responseHeaderRef REFERENCE TO outRef.responseHeader; 
		
		IF transRef.HostResponse.ErrorCode <> getSuccessResponseCode() THEN
			SET responseHeaderRef.responseCode = transRef.HostResponse.ErrorCode;
			SET responseHeaderRef.responseDetails = transRef.HostResponse.Error;
			SET status = 'FAILURE';
		END IF;

		CALL updateTransactionStatus(Environment.Variables.Transaction.DetailId, 'TRANSACTION_DETAIL', status);
		
		RETURN TRUE;
	END; 
	
END MODULE;