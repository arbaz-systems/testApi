BROKER SCHEMA com.systemsltd.ubl.accountmanagementservice

PATH com.systemsltd.common, com.systemsltd.ubl.cbs, com.systemsltd.ubl.common, 
com.systemsltd.ubl.common.config, com.systemsltd.ubl.common.database, com.systemsltd.ubl.caps;

DECLARE cbs NAMESPACE 'http://www.systemsltd.com/ubl/cbs';
DECLARE omni NAMESPACE 'http://tempuri.org/';
DECLARE prime NAMESPACE 'http://CTL.COM.Services.Prime.Issuer.WebServices/PrimeIssuerServices';
DECLARE ns NAMESPACE 'http://CTL.COM.Services.Prime.Issuer.WebServices/PrimeIssuerServices';
DECLARE ns1 NAMESPACE 'CTL.COM.Services';

DECLARE OMNI_URL EXTERNAL CHARACTER '';

CREATE FILTER MODULE ValidateAccountOpeningRequest
	CREATE FUNCTION Main () RETURNS BOOLEAN
	BEGIN
		DECLARE transRef REFERENCE TO Environment.Variables.Transaction;
		DECLARE inMsgRef REFERENCE TO Root.JSON.Data;
		
		CREATE FIELD transRef.Error IDENTITY (JSON.Array);
		
		CALL validateServiceHeader(inMsgRef.serviceHeader, transRef);
		CALL validateTransactionInfo(inMsgRef.transactionInfo, transRef, 'CUSTOMER_ACCOUNT', 'OPENING_REQUEST');
		
		IF NOT fieldAndValueExists(inMsgRef.accountOpeningRequest.hostSystem, 'hostSystem') THEN
			CREATE LASTCHILD OF transRef.Error TYPE NameValue NAME 'Item' VALUE getValidationErrorMsg('hostSystem');
		END IF;
		
		DECLARE customerDetailsRef REFERENCE TO inMsgRef.accountOpeningRequest.customerDetails;
		DECLARE accountDetailsRef REFERENCE TO inMsgRef.accountOpeningRequest.accountDetails;
		
		IF (UPPER(inMsgRef.accountOpeningRequest.hostSystem) = 'OMNI') THEN
			IF NOT fieldAndValueExists(customerDetailsRef.customerName, 'customerName') THEN
				CREATE LASTCHILD OF transRef.Error TYPE NameValue NAME 'Item' VALUE getValidationErrorMsg('customerName');
			END IF;
			
			IF NOT fieldAndValueExists(customerDetailsRef.cnic, 'cnic') THEN
				CREATE LASTCHILD OF transRef.Error TYPE NameValue NAME 'Item' VALUE getValidationErrorMsg('cnic');
			END IF;
			
			IF NOT fieldAndValueExists(customerDetailsRef.mobileNumber, 'mobileNumber') THEN
				CREATE LASTCHILD OF transRef.Error TYPE NameValue NAME 'Item' VALUE getValidationErrorMsg('mobileNumber');
			END IF;
			
			IF NOT fieldAndValueExists(customerDetailsRef.emailAddress, 'emailAddress') THEN
				CREATE LASTCHILD OF transRef.Error TYPE NameValue NAME 'Item' VALUE getValidationErrorMsg('emailAddress');
			END IF;
			
			IF NOT fieldAndValueExists(customerDetailsRef.cityID, 'cityID') THEN
				CREATE LASTCHILD OF transRef.Error TYPE NameValue NAME 'Item' VALUE getValidationErrorMsg('cityID');
			END IF;
			
			IF NOT fieldAndValueExists(customerDetailsRef.address, 'address') THEN
				CREATE LASTCHILD OF transRef.Error TYPE NameValue NAME 'Item' VALUE getValidationErrorMsg('address');
			END IF;
			
			IF NOT fieldAndValueExists(customerDetailsRef.cnicIssuanceDate, 'cnicIssuanceDate') THEN
				CREATE LASTCHILD OF transRef.Error TYPE NameValue NAME 'Item' VALUE getValidationErrorMsg('cnicIssuanceDate');
			END IF;
			
--			IF NOT fieldAndValueExists(customerDetailsRef.facePicture, 'facePicture') THEN
--				CREATE LASTCHILD OF transRef.Error TYPE NameValue NAME 'Item' VALUE getValidationErrorMsg('facePicture');
--			END IF;
--			
--			IF NOT fieldAndValueExists(customerDetailsRef.cnicFront, 'cnicFront') THEN
--				CREATE LASTCHILD OF transRef.Error TYPE NameValue NAME 'Item' VALUE getValidationErrorMsg('cnicFront');
--			END IF;
			
			IF NOT fieldAndValueExists(customerDetailsRef.isFatca, 'isFatca') THEN
				CREATE LASTCHILD OF transRef.Error TYPE NameValue NAME 'Item' VALUE getValidationErrorMsg('isFatca');
			END IF;
			
			IF NOT fieldAndValueExists(accountDetailsRef.tnc, 'tnc') THEN
				CREATE LASTCHILD OF transRef.Error TYPE NameValue NAME 'Item' VALUE getValidationErrorMsg('tnc');
			END IF;
			
		END IF;
		RETURN EXISTS(transRef.Error.Item[]);
	END; 
END MODULE;


CREATE COMPUTE MODULE PrepareAccountOpeningCBSRequest
	CREATE FUNCTION Main () RETURNS BOOLEAN
	BEGIN
		SET OutputRoot.Properties = InputProperties;
		DECLARE inMsgRef REFERENCE TO InputRoot.JSON.Data;
		
		CREATE FIELD OutputRoot.XMLNSC.REQUEST_IN.HEADER_IN;
		DECLARE outRef REFERENCE TO OutputRoot.XMLNSC.REQUEST_IN;

		CALL populateCBSMessageHeader(inMsgRef,outRef);
		
		CREATE FIELD OutputRoot.XMLNSC.REQUEST_IN.DETAIL_IN.SYM_RB_ACCT_CASA_OPEN_IN;
		MOVE outRef TO outRef.DETAIL_IN.SYM_RB_ACCT_CASA_OPEN_IN;
		MOVE inMsgRef TO InputRoot.JSON.Data.accountOpeningRequest;
		
		SET outRef.HOST_CHECK_FLAG = 'N';
--		SET outRef.IS_CLIENT_CMC_USED = COALESCE(inMsgRef.customerDetails.isClientCmcUsed, '');
--		SET outRef.CHK_TELLER_CCY = COALESCE(inMsgRef.accountDetails.chkTellerCcy, '');
		SET outRef.IS_EXT_BRANCH_USED = COALESCE(inMsgRef.accountDetails.isExtBranchUsed, '');
 		SET outRef.ACCT_NO = COALESCE(inMsgRef.accountDetails.acctNo, '');
		SET outRef.ACCT_TYPE = COALESCE(inMsgRef.accountDetails.acctType, '');
		SET outRef.CLIENT_NO = COALESCE(inMsgRef.customerDetails.clientNo, '');
		SET outRef.ACCT_DESC = COALESCE(inMsgRef.accountDetails.acctDesc, '');
		SET outRef.BRANCH = COALESCE(inMsgRef.accountDetails.branch, '');
		SET outRef.CCY = COALESCE(inMsgRef.accountDetails.ccy, '');
		SET outRef.OWNERSHIP_TYPE = COALESCE(inMsgRef.accountDetails.ownershipType, '');
		SET outRef.CLIENT_IND = COALESCE(inMsgRef.customerDetails.clientInd, '');
 		SET outRef.WDL_NOTICE_IND = COALESCE(inMsgRef.accountDetails.wdlNoticeInd, '');
		SET outRef.ACCT_TERM_PERIOD = COALESCE(inMsgRef.accountDetails.acctTermPeriod, '');
		SET outRef.ACCT_TERM_TYPE = COALESCE(inMsgRef.accountDetails.acctTermType, '');
		SET outRef.STMT_PBK = COALESCE(inMsgRef.accountDetails.stmtPbk, '');
		SET outRef.PROFIT_CENTRE = COALESCE(inMsgRef.accountDetails.profitCentre, '');
		SET outRef.PASSWORD_REQD = COALESCE(inMsgRef.accountDetails.passwordReqd, '');
		SET outRef.PWD_ACCT_TYPE = COALESCE(inMsgRef.accountDetails.pwdAcctType, '');
		SET outRef.PWD_DR_TXN = COALESCE(inMsgRef.accountDetails.pwdDrTxn, '');
 		SET outRef.PWD_OWNERSHIP = COALESCE(inMsgRef.accountDetails.pwdOwnership, '');
		SET outRef.PWD_SIGNATORY = COALESCE(inMsgRef.accountDetails.pwdSignatory, '');
		SET outRef.ACCT_PASSWORD = COALESCE(inMsgRef.accountDetails.acctPassword, '');
		SET outRef.HO_REP_CODE = COALESCE(inMsgRef.accountDetails.hoRepCode, '');
		SET outRef.NBC_CODE = COALESCE(inMsgRef.accountDetails.nbcCode, '');
		SET outRef.TOLERANCE_AMT = COALESCE(inMsgRef.accountDetails.toleranceAmt, '');
		SET outRef.ATA_ACCT = COALESCE(inMsgRef.accountDetails.ataAcct, '');
		SET outRef.VALUE_DATE_MODE = COALESCE(inMsgRef.accountDetails.valueDateMode, '');
 		SET outRef.LIMIT_AMT = COALESCE(inMsgRef.accountDetails.limitAmt, '');
		SET outRef.PURPOSE_CODE = COALESCE(inMsgRef.accountDetails.purposeCode, '');
		SET outRef.FREE_CHEQUES = COALESCE(inMsgRef.accountDetails.freeCheques, '');
		SET outRef.GEN_OD_REMIND = COALESCE(inMsgRef.accountDetails.genOdRemind, '');
		SET outRef.SEGMENT_CODE = COALESCE(inMsgRef.accountDetails.segmentCode, '');
		SET outRef.CR_INT_TYPE = COALESCE(inMsgRef.accountDetails.crIntType, '');
		SET outRef.CR_ACCT_LEVEL_INT_RATE = COALESCE(inMsgRef.accountDetails.crAcctLevelIntRate, '');
		SET outRef.CR_SPREAD_RATE = COALESCE(inMsgRef.accountDetails.crSpreadRate, '');
 		SET outRef.CR_NEXT_CYCLE_DATE = COALESCE(inMsgRef.accountDetails.crNextCycleDate, '');
		SET outRef.CR_INT_DAY = COALESCE(inMsgRef.accountDetails.crIntDay, '');
		SET outRef.CR_INT_CAP = COALESCE(inMsgRef.accountDetails.crIntCap, '');
		SET outRef.CR_THIRD_PARTY_ACCT = COALESCE(inMsgRef.accountDetails.crThirdPartyAcct, '');
		SET outRef.CR_PERIOD_FREQ = COALESCE(inMsgRef.accountDetails.crPeriodFreq, '');
		SET outRef.CR_TAX_TYPE = COALESCE(inMsgRef.accountDetails.crTaxType, '');
		SET outRef.CR_COF_APP_TYPE = COALESCE(inMsgRef.accountDetails.crCofAppType, '');
		SET outRef.CR_FUND_TYPE = COALESCE(inMsgRef.accountDetails.crFundType, '');
		SET outRef.CR_COF_RATE = COALESCE(inMsgRef.accountDetails.crCofRate, '');
		SET outRef.CR_COF_LIQ_PREMIA = COALESCE(inMsgRef.accountDetails.crCofLiqPremia, '');
		SET outRef.CR_STAT_CODE = COALESCE(inMsgRef.accountDetails.crStatCode, '');
		SET outRef.CR_REALZN_INT_TYPE = COALESCE(inMsgRef.accountDetails.crRealznIntType, '');
		SET outRef.DR_INT_TYPE = COALESCE(inMsgRef.accountDetails.drIntType, '');
		SET outRef.PENALTY_MARGIN_RATE = COALESCE(inMsgRef.accountDetails.penaltyMarginRate, '');
		SET outRef.DR_ACCT_LEVEL_INT_RATE = COALESCE(inMsgRef.accountDetails.drAcctLevelIntRate, '');
		SET outRef.DR_SPREAD_RATE = COALESCE(inMsgRef.accountDetails.drSpreadRate, '');
		SET outRef.DR_NEXT_CYCLE_DATE = COALESCE(inMsgRef.accountDetails.drNextCycleDate, '');
		SET outRef.DR_INT_DAY = COALESCE(inMsgRef.accountDetails.drIntDay, '');
		SET outRef.DR_INT_CAP = COALESCE(inMsgRef.accountDetails.drIntCap, '');
		SET outRef.DR_THIRD_PARTY_ACCT = COALESCE(inMsgRef.accountDetails.drThirdPartyAcct, '');
		SET outRef.DR_PERIOD_FREQ = COALESCE(inMsgRef.accountDetails.drPeriodFreq, '');
		SET outRef.DR_COF_APP_TYPE = COALESCE(inMsgRef.accountDetails.drCofAppType, '');
		SET outRef.DR_FUND_TYPE = COALESCE(inMsgRef.accountDetails.drFundType, '');
		SET outRef.DR_COF_RATE = COALESCE(inMsgRef.accountDetails.drCofRate, '');
		SET outRef.DR_COF_LIQ_PREMIA = COALESCE(inMsgRef.accountDetails.drCofLiqPremia, '');
		SET outRef.DR_STAT_CODE = COALESCE(inMsgRef.accountDetails.drStatCode, '');
		SET outRef.COOPERATION = COALESCE(inMsgRef.accountDetails.cooperation, '');
		SET outRef.COMPANY = COALESCE(inMsgRef.accountDetails.company, '');
		SET outRef.COMPANY_EMP = COALESCE(inMsgRef.accountDetails.companyEmp, '');
		SET outRef.CONTRACTOR = COALESCE(inMsgRef.accountDetails.contractor, '');
		SET outRef.REGULATION_WAY = COALESCE(inMsgRef.accountDetails.regulationWay, '');
		SET outRef.FOV = COALESCE(inMsgRef.accountDetails.fov, '');
		SET outRef.WS_ID = COALESCE(inMsgRef.accountDetails.wsId, '');
		SET outRef.USER_ID = COALESCE(inMsgRef.accountDetails.userId, '');
		SET outRef.OFFICER_ID = COALESCE(inMsgRef.accountDetails.officerId, '');
		SET outRef.ACTUAL_OR_LEDGER_BAL = COALESCE(inMsgRef.accountDetails.actualOrLedgerBal, '');
		SET outRef.DOC_TYPE = COALESCE(inMsgRef.accountDetails.docType, '');
--		SET outRef.SUSPEND_MAIL_CODE = COALESCE(inMsgRef.accountDetails.suspendMailCode, '');
		SET outRef.SC_PACK_TYPE = COALESCE(inMsgRef.accountDetails.scPackType, '');
--		SET outRef.EXCEED_RF_LIMIT = COALESCE(inMsgRef.accountDetails.exceedRfLimit, '');
		
		CREATE FIELD outRef.RB_STMT_CASA_INS.RB_STMT_CASA_INS_T;
		MOVE outRef TO outRef.RB_STMT_CASA_INS.RB_STMT_CASA_INS_T;
		MOVE inMsgRef TO inMsgRef.accountDetails.rbStmtCasaIns;
		SET outRef.POSITION = COALESCE(inMsgRef."position", '');
		SET outRef.CONTACT_REF_NO = COALESCE(inMsgRef.contactRefNo, '');
		SET outRef.CONTACT_TYPE = COALESCE(inMsgRef.contactType, '');
		SET outRef.NO_OF_COPIES = COALESCE(inMsgRef.noOfCopies, '');
		SET outRef.STMT_HANDLING = COALESCE(inMsgRef.stmtHandling, '');
		SET outRef.STMT_LANG = COALESCE(inMsgRef.stmtLang, '');
		SET outRef.PERIOD_FREQ = COALESCE(inMsgRef.periodFreq, '');
		SET outRef.STMT_DAY = COALESCE(inMsgRef.stmtDay, '');

		IF fieldAndValueExists(inMsgRef.nextStmtDate, 'nextStmtDate') THEN
			SET outRef.NEXT_STMT_DATE = CAST(CAST(inMsgRef.nextStmtDate AS DATE FORMAT 'yyyy-MM-dd') AS CHARACTER FORMAT 'dd.MM.yyyy HH:mm:ss');
		ELSE
			SET outRef.NEXT_STMT_DATE = '';
		END IF;

		SET outRef.SUPPRESS_PRINT = COALESCE(inMsgRef.suppressPrint, '');
		SET outRef.LAST_STMT_NO = COALESCE(inMsgRef.lastStmtNo, '');
		SET outRef.STMT_AT_CAP = COALESCE(inMsgRef.stmtAtCap, '');
		SET outRef.CML_STMT_CODE = COALESCE(inMsgRef.cmlStmtCode, '');
		SET outRef.ON_MATURITY_STMT = COALESCE(inMsgRef.onMaturityStmt, '');
		SET outRef.STMT_AFTER_MOVEMENT = COALESCE(inMsgRef.stmtAfterMovement, '');
		SET outRef.STMT_TYPE = COALESCE(inMsgRef.stmtType, '');
		SET outRef.CONS_SC = COALESCE(inMsgRef.consSc, '');
		SET outRef.TEMPLATE = COALESCE(inMsgRef.template, '');
		SET outRef.DISTR_CHANNEL = COALESCE(inMsgRef.distrChannel, '');
		SET outRef.CTRL_COMMAND = COALESCE(inMsgRef.ctrlCommand, '');
--		SET outRef.SUSPEND_MAIL_CODE = COALESCE(inMsgRef.suspendMailCode, '');
		
		CREATE FIELD OutputRoot.XMLNSC.REQUEST_IN.DETAIL_IN.SYM_RB_ACCT_CASA_OPEN_IN.RB_JOINT_ACCT_CASA_INS.RB_JOINT_ACCT_CASA_INS_T;
		MOVE outRef TO OutputRoot.XMLNSC.REQUEST_IN.DETAIL_IN.SYM_RB_ACCT_CASA_OPEN_IN.RB_JOINT_ACCT_CASA_INS.RB_JOINT_ACCT_CASA_INS_T;

		IF fieldAndValueExists(InputRoot.JSON.Data.accountOpeningRequest.accountDetails.rbJointAcctCasaIns."position", 'position') THEN
			MOVE inMsgRef TO InputRoot.JSON.Data.accountOpeningRequest.accountDetails.rbJointAcctCasaIns;
			SET outRef.POSITION = COALESCE(inMsgRef."position", '');
			SET outRef.JOINT_CLIENT_NO = COALESCE(inMsgRef.jointClientNo, '');
		END IF;

		CREATE FIELD OutputRoot.XMLNSC.REQUEST_IN.DETAIL_IN.SYM_RB_ACCT_CASA_OPEN_IN.RB_DEFERRED_DOC_CASA_INS.RB_DEFERRED_DOC_CASA_INS_T;
		MOVE outRef TO OutputRoot.XMLNSC.REQUEST_IN.DETAIL_IN.SYM_RB_ACCT_CASA_OPEN_IN.RB_DEFERRED_DOC_CASA_INS.RB_DEFERRED_DOC_CASA_INS_T;

		IF fieldAndValueExists(InputRoot.JSON.Data.accountOpeningRequest.accountDetails.rbDeferredDocCasaIns."position", 'position') THEN
			MOVE inMsgRef TO InputRoot.JSON.Data.accountOpeningRequest.accountDetails.rbDeferredDocCasaIns;
			SET outRef.POSITION = COALESCE(inMsgRef."position", '');
			SET outRef.DOC_TYPE = COALESCE(inMsgRef.docType, '');
			SET outRef.DOC_TYPE_DESC = COALESCE(inMsgRef.docTypeDesc, '');
			SET outRef.DELIVERY_DATE = COALESCE(inMsgRef.deliveryDate, '');
			SET outRef.RECEIVED_DATE = COALESCE(inMsgRef.receivedDate, '');
			SET outRef.LAST_CHANGE_OFFICER = COALESCE(inMsgRef.lastChangeOfficer, '');
			SET outRef.LAST_CHANGE_DATE = COALESCE(inMsgRef.lastChangeDate, '');
			SET outRef.RESTRAINT_SEQ_NO = COALESCE(inMsgRef.restraintSeqNo, '');
		END IF;

--		MOVE inMsgRef TO InputRoot.JSON.Data.accountOpeningRequest.accountDetails.metaData.metaColumns.saMetaColumnT.Item;
--		CREATE FIELD OutputRoot.XMLNSC.REQUEST_IN.DETAIL_IN.SYM_RB_ACCT_CASA_OPEN_IN.META_DATA;
--		MOVE outRef TO OutputRoot.XMLNSC.REQUEST_IN.DETAIL_IN.SYM_RB_ACCT_CASA_OPEN_IN.META_DATA;
--		
--		SET outRef.META_ENTITY_TYPE = COALESCE(InputRoot.JSON.Data.accountOpeningRequest.accountDetails.metaData.metaEntityType, '');
--		CREATE FIELD outRef.META_COLUMNS AS outRef;
--		DECLARE metaDataRef REFERENCE TO outRef.META_DATA;
--		WHILE LASTMOVE(inMsgRef) DO
--			CREATE LASTCHILD OF outRef AS metaDataRef NAME 'SA_META_COLUMN_T';
--			SET metaDataRef.META_SIMPLE.META_ID = COALESCE(inMsgRef.metaSimple.metaId, '');
--			SET metaDataRef.META_SIMPLE.META_VALUE = COALESCE(inMsgRef.metaSimple.metaValue, '');
--			MOVE inMsgRef NEXTSIBLING;
--		END WHILE;

		MOVE inMsgRef TO InputRoot.JSON.Data.accountOpeningRequest.accountDetails;
		MOVE outRef TO OutputRoot.XMLNSC.REQUEST_IN.DETAIL_IN.SYM_RB_ACCT_CASA_OPEN_IN;
		CALL populateMetaData(inMsgRef.metaData, outRef);

		RETURN TRUE;
	END;
END MODULE;


CREATE COMPUTE MODULE CallAccountOpeningCBS
	CREATE FUNCTION Main () RETURNS BOOLEAN
	BEGIN
		SET OutputRoot.Properties = InputProperties;
		
		DECLARE serializedRequest, serializedResponse CHARACTER '';
		DECLARE cbsSchemaName CHARACTER getCBSSchemaName();
		DECLARE dsnName CHARACTER Environment.Variables.fromRegionDataSource;
		
		SET serializedRequest = serializeMessage(InputRoot);
		CALL PROCESS_INQ(serializedRequest, serializedResponse) IN Database.{dsnName}.{cbsSchemaName};

		DECLARE accountOpeningResponse BLOB CAST( serializedResponse AS BLOB CCSID InputProperties.CodedCharSetId);
		CREATE LASTCHILD OF OutputRoot DOMAIN('XMLNSC') PARSE(accountOpeningResponse, InputProperties.Encoding, 
															  InputProperties.CodedCharSetId);

		DECLARE responseRef REFERENCE TO OutputRoot.XMLNSC.REQUEST_OUT;
		DECLARE envRef REFERENCE TO Environment.Variables.Transaction;
		
		IF cbsTransactionSuccessfull(responseRef.HEADER_OUT.RESULT_CODE) THEN
			SET envRef.HostResponse.ErrorCode = getSuccessResponseCode();
			
			--MOVE responseRef TO responseRef.DETAIL_OUT.SYM_RB_ACCT_CASA_OPEN_OUT;
			
			CREATE FIELD Environment.Variables.Transaction.HostResponse.ResponseDetails;
			DECLARE outRef REFERENCE TO Environment.Variables.Transaction.HostResponse.ResponseDetails;
			SET Environment.Variables.Transaction.HostResponse.ResponseDetails = responseRef.DETAIL_OUT.SYM_RB_ACCT_CASA_OPEN_OUT;
			
--			SET outRef.accountNumber = responseRef.ACCT_NO;
--			SET outRef.internalKey = responseRef.INTERNAL_KEY;
--			SET outRef.ibanCode = responseRef.IBAN_CODE;
--			SET outRef.accountCurrency = responseRef.ACCT_STATUS;
--			SET outRef.accountType = responseRef.ACCT_OPEN_DATE;
--			SET outRef.branchInfo.branchAddress.addressLine = responseRef.MAIN_PERIOD_FREQ;
--			SET outRef.branchInfo.branchAddress.addressLine = responseRef.MAIN_STMT_DAY;
		ELSE
			PROPAGATE TO TERMINAL 1 DELETE NONE;
		END IF;
		
		RETURN TRUE;
	END; 
	
END MODULE;

CREATE COMPUTE MODULE PrepareAccountOpeningOMNIRequest
	CREATE FUNCTION Main () RETURNS BOOLEAN
	BEGIN
		SET OutputRoot.Properties = InputProperties;

		SET OutputLocalEnvironment.Destination.SOAP.Request.Transport.HTTP.WebServiceURL = OMNI_URL;

		DECLARE inMsgRef REFERENCE TO InputRoot.JSON.Data.serviceHeader;
		
		CREATE FIELD OutputRoot.XMLNSC.omni:ProcessSelfAccountOpening;
		DECLARE outputRef REFERENCE TO OutputRoot.XMLNSC.omni:ProcessSelfAccountOpening;
		
		SET outputRef.omni:userName = inMsgRef.authInfo.username;
		SET outputRef.omni:password = inMsgRef.authInfo.password;
		SET outputRef.omni:channelID = inMsgRef.channel;
		
		MOVE inMsgRef TO InputRoot.JSON.Data.accountOpeningRequest;
		
		SET outputRef.omni:customerName = inMsgRef.customerDetails.customerName;
		SET outputRef.omni:cnic = inMsgRef.customerDetails.cnic;
		SET outputRef.omni:mobileNumber = inMsgRef.customerDetails.mobileNumber;
		SET outputRef.omni:emailAddress = inMsgRef.customerDetails.emailAddress;
		SET outputRef.omni:cityID = inMsgRef.customerDetails.cityID;
		SET outputRef.omni:address = inMsgRef.customerDetails.address;
		SET outputRef.omni:isFatca = inMsgRef.customerDetails.isFatca;
		SET outputRef.omni:cnicIssuanceDate = inMsgRef.customerDetails.cnicIssuanceDate;
		SET outputRef.omni:tnc = inMsgRef.accountDetails.tnc;
		SET outputRef.omni:deviceKey = inMsgRef.accountDetails.deviceKey;
		SET outputRef.omni:deviceInfo = inMsgRef.accountDetails.deviceInfo;
		SET outputRef.omni:IMEI = inMsgRef.accountDetails.imei;
		SET outputRef.omni:facePicture = BASE64ENCODE(inMsgRef.customerDetails.facePicture);
		SET outputRef.omni:cnicFront = BASE64ENCODE(inMsgRef.customerDetails.cnicFront);
		
		RETURN TRUE;
	END; 	
END MODULE;

CREATE COMPUTE MODULE PrepareAccountOpeningPrimeRequest 
	CREATE FUNCTION Main () RETURNS BOOLEAN
	BEGIN
		SET OutputRoot = InputRoot;
		--Get Ticket
		PROPAGATE TO TERMINAL 'out1';
		
		DECLARE inputRef REFERENCE TO InputRoot.JSON.Data;		
		DECLARE outRef REFERENCE TO OutputRoot;
		
		IF FIELDTYPE(Environment.Variables.Ticket) IS NOT NULL THEN
			SET OutputRoot.Properties = InputProperties;
			SET OutputRoot.Properties.MessageSet = '{PRIMELibrary}';
			
			CREATE FIELD OutputRoot.XMLNSC.prime:LoadBridgeXml.prime:xmlRequest AS outRef;
			SET outRef.prime:Header.prime:MessageID = inputRef.transactionInfo.referenceId;
			SET outRef.prime:Header.prime:Ticket = Environment.Variables.Ticket;
			
			MOVE inputRef TO inputRef.accountOpeningRequest.cardDetails;
			SET outRef.prime:XmlBridge = inputRef.xmlBridge;
			SET outRef.prime:ActivityDescription = inputRef.activityDescription;
			
			--PROPAGATE TO TERMINAL 'out2';
		END IF;
--declare a integer 0;
		RETURN TRUE;
	END;
END MODULE;


CREATE COMPUTE MODULE PrepareAccountOpeningJSONResponse
	CREATE FUNCTION Main () RETURNS BOOLEAN
	BEGIN
		CREATE FIELD OutputRoot.JSON.Data;
		DECLARE outRef REFERENCE TO OutputRoot.JSON.Data;
		DECLARE transRef REFERENCE TO Environment.Variables.Transaction;
		DECLARE status CHARACTER 'SUCCESS';

		SET OutputRoot.Properties = Environment.Variables.Transaction.Properties;
		CALL copyAndConvertServiceHeader(transRef.Request.serviceHeader, outRef);
		CALL copyAndConvertTransactionInfo(transRef.Request.transactionInfo, outRef);
		CALL PopulateSuccessResponseHeader(outRef, status);
		
		DECLARE responseHeaderRef REFERENCE TO outRef.responseHeader; 
		
		IF transRef.HostResponse.ErrorCode <> getSuccessResponseCode() THEN
			SET responseHeaderRef.responseCode = transRef.HostResponse.ErrorCode;
			SET responseHeaderRef.responseDetails = transRef.HostResponse.Error;
			SET status = 'FAILURE';
		ELSE
			DECLARE inMsgRef REFERENCE TO InputRoot;
			CREATE FIELD outRef.accountOpeningResponse;
			MOVE outRef TO outRef.accountOpeningResponse;
			IF (transRef.Request.accountOpeningRequest.hostSystem = getPRIMEHost()) THEN
				MOVE inMsgRef TO InputRoot.XMLNSC.prime:LoadBridgeXmlResponse.prime:LoadBridgeXmlResult.prime:ResponseData.prime:Numbers;
			--	CREATE FIELD outRef.numbers;
				--MOVE outRef TO outRef.numbers;
				SET outRef.customerNumber = inMsgRef.prime:CustomerNumber;
				SET outRef.accountNumber = inMsgRef.prime:AccountNumber;
				SET outRef.cardNumber = inMsgRef.prime:CardNumber;
				SET outRef.entityUpdates = inMsgRef.prime:EntityUpdates;
				SET outRef.customerSerialNo = inMsgRef.prime:CustomerSerno;
				SET outRef.accountSerialNo = inMsgRef.prime:AccountSerno;
				SET outRef.cardSerialNo = inMsgRef.prime:CardSerno;
				SET outRef.elementType = inMsgRef.prime:ElementType;
				SET outRef.respId = inMsgRef.prime:RespID;
				SET outRef.parentLevelId = inMsgRef.prime:ParentLevelID;
				SET outRef.levelId = inMsgRef.prime:LevelID;
				
				MOVE inMsgRef TO inMsgRef.prime:UpdateMessageList.prime:UpdateMessage;
				--CREATE FIELD outRef.updateMessage;
				SET outRef.updateMessage.entityName = inMsgRef.ns1:Entityname;
				SET outRef.updateMessage.entityNumber = inMsgRef.ns1:Entitynumber;
				SET outRef.updateMessage.entitySerialNo = inMsgRef.ns1:Entityserno;
				SET outRef.updateMessage.fieldName = inMsgRef.ns1:Fieldname;
				SET outRef.updateMessage.fieldType = inMsgRef.ns1:Fieldtype;
				SET outRef.updateMessage.fieldValue = inMsgRef.ns1:Fieldvalue;
				SET outRef.applicationCreateDate = InputRoot.XMLNSC.prime:LoadBridgeXmlResponse.prime:LoadBridgeXmlResult.prime:ResponseData.prime:ApplicationCreateDate;

			ELSEIF (transRef.Request.accountOpeningRequest.hostSystem = getCBSHost()) THEN
				MOVE inMsgRef TO InputRoot.XMLNSC.REQUEST_OUT.DETAIL_OUT.SYM_RB_ACCT_CASA_OPEN_OUT;
				SET outRef.acctNo = inMsgRef.ACCT_NO;
				SET outRef.internalKey = inMsgRef.INTERNAL_KEY;
				SET outRef.ibanCode = inMsgRef.IBAN_CODE;
				SET outRef.acctStatus = inMsgRef.ACCT_STATUS;

				IF fieldAndValueExists(inMsgRef.MAIN_PERIOD_FREQ, 'MAIN_PERIOD_FREQ') THEN
					SET outRef.acctOpenDate = CAST(inMsgRef.ACCT_OPEN_DATE AS DATE FORMAT 'dd.MM.yyyy HH:mm:ss');
				END IF;

				SET outRef.periodFreq = inMsgRef.MAIN_PERIOD_FREQ;
				SET outRef.stmtDay = inMsgRef.MAIN_STMT_DAY;

			ELSEIF (transRef.Request.accountOpeningRequest.hostSystem = getOMNIHost()) THEN
				SET outRef.acctNo = InputRoot.SOAP.Body.omni:ProcessSelfAccountOpeningResponse.omni:accountID;
			END IF;		
		END IF;

		CALL updateTransactionStatus(Environment.Variables.Transaction.DetailId, 'TRANSACTION_DETAIL', status);
		
		RETURN TRUE;
	END; 
	
END MODULE;


CREATE COMPUTE MODULE PrepareAccountOpeningErrorResponse
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		CREATE FIELD OutputRoot.JSON.Data;
		DECLARE outRef REFERENCE TO OutputRoot.JSON.Data;
		DECLARE transRef REFERENCE TO Environment.Variables.Transaction;
		DECLARE status CHARACTER 'FAILURE';

		CALL copyAndConvertServiceHeader(transRef.Request.serviceHeader, outRef);
		CALL copyAndConvertTransactionInfo(transRef.Request.transactionInfo, outRef);
		
		DECLARE responseHeaderRef REFERENCE TO outRef.responseHeader; 
		
		SET responseHeaderRef.responseCode = '01';
		SET responseHeaderRef.responseDescription = 'Invalid Hostname';
		
		CALL updateTransactionStatus(Environment.Variables.Transaction.DetailId, 'TRANSACTION_DETAIL', status);
		
		RETURN TRUE;
	END;

END MODULE;

CREATE FILTER MODULE IsAcquireTicketSuccess
	CREATE FUNCTION Main () RETURNS BOOLEAN
	BEGIN
		DECLARE responseRef REFERENCE TO Root.XMLNSC.ns:AcquireTicketResponse;
		DECLARE isSuccess BOOLEAN (responseRef.ns:AcquireTicketResult.ns:Result.ns:Code = 0);

		IF isSuccess THEN
			SET Environment.Variables.Ticket = responseRef.ns:AcquireTicketResult.ns:Ticket;
		END IF;

		RETURN isSuccess;
	END;
END MODULE;
